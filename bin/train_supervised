#!/usr/bin/env python

import os
import json
import sys
import traceback
import click
import numpy as np
import subprocess

@click.command()
@click.option('--config-file', '-p',
              help="Path to the config file (json) that contains the parameters for the experiment.")
@click.option('--output-path', '-o',
              help="Location for saving the training results (model artifacts and output files).")
def main(config_file, output_path):
    print('Starting the training.')
    os.makedirs(output_path, exist_ok=True)
    try:
        # Read in any hyperparameters that the user passed with the training job
        # Depending on how you set the hyperparameters

        subprocess.run(['python', './supervised.py', '-c', "./default_config.yml", "-h", config_file, '--dataset', 'alerts', '-o', output_path])

    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' +
              str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)


if __name__ == '__main__':
    main()
    sys.exit(0)
